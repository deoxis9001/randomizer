#ifndef dogShopItem
	#define dogShopItem "0x36"
#endif
#ifndef dogShopSub
	#define dogShopSub "0x00"
#endif
#ifndef walletShopItem
	#define walletShopItem "0x64"
#endif
#ifndef walletShopSub
	#define walletShopSub "0x00"
#endif
#ifndef boomerangShopItem
	#define boomerangShopItem "0x0B"
#endif
#ifndef boomerangShopSub
	#define boomerangShopSub "0x00"
#endif
#ifndef quiverShopItem
	#define quiverShopItem "0x66"
#endif
#ifndef quiverShopSub
	#define quiverShopSub "0x00"
#endif
#ifndef bombBagShopItem
	#define bombBagShopItem "0x65"
#endif
#ifndef bombBagShopSub
	#define bombBagShopSub "0x00"
#endif
#ifndef goronMerchantCustomSets
	#define goronMerchantCustomSets "0"
#endif
#ifndef goron1LeftItem
	#define goron1LeftItem "0x5C"
#endif
#ifndef goron1LeftSub
	#define goron1LeftSub "0x6E"
#endif
#ifndef goron1MiddleItem
	#define goron1MiddleItem "0x5C"
#endif
#ifndef goron1MiddleSub
	#define goron1MiddleSub "0x71"
#endif
#ifndef goron1RightItem
	#define goron1RightItem "0x5C"
#endif
#ifndef goron1RightSub
	#define goron1RightSub "0x73"
#endif
#ifndef goron2LeftItem
	#define goron2LeftItem "0x5C"
#endif
#ifndef goron2LeftSub
	#define goron2LeftSub "0x6E"
#endif
#ifndef goron2MiddleItem
	#define goron2MiddleItem "0x5C"
#endif
#ifndef goron2MiddleSub
	#define goron2MiddleSub "0x71"
#endif
#ifndef goron2RightItem
	#define goron2RightItem "0x5C"
#endif
#ifndef goron2RightSub
	#define goron2RightSub "0x73"
#endif
#ifndef goron3LeftItem
	#define goron3LeftItem "0x5C"
#endif
#ifndef goron3LeftSub
	#define goron3LeftSub "0x6E"
#endif
#ifndef goron3MiddleItem
	#define goron3MiddleItem "0x5C"
#endif
#ifndef goron3MiddleSub
	#define goron3MiddleSub "0x71"
#endif
#ifndef goron3RightItem
	#define goron3RightItem "0x5C"
#endif
#ifndef goron3RightSub
	#define goron3RightSub "0x73"
#endif
#ifndef goron4LeftItem
	#define goron4LeftItem "0x5C"
#endif
#ifndef goron4LeftSub
	#define goron4LeftSub "0x6E"
#endif
#ifndef goron4MiddleItem
	#define goron4MiddleItem "0x5C"
#endif
#ifndef goron4MiddleSub
	#define goron4MiddleSub "0x71"
#endif
#ifndef goron4RightItem
	#define goron4RightItem "0x5C"
#endif
#ifndef goron4RightSub
	#define goron4RightSub "0x73"
#endif
#ifndef goron5LeftItem
	#define goron5LeftItem "0x5C"
#endif
#ifndef goron5LeftSub
	#define goron5LeftSub "0x6E"
#endif
#ifndef goron5MiddleItem
	#define goron5MiddleItem "0x5C"
#endif
#ifndef goron5MiddleSub
	#define goron5MiddleSub "0x71"
#endif
#ifndef goron5RightItem
	#define goron5RightItem "0x5C"
#endif
#ifndef goron5RightSub
	#define goron5RightSub "0x73"
#endif

#define shopItem(itemID,subID,originalItem,itemX,itemY) "BYTE 0x06 0x0F 0x02 itemID subID 0; SHORT originalItem itemX itemY 0 0"
#define shopTerminator "WORD (-1) (-1) (-1) (-1)"

//remove dog food special case
PUSH; ORG $812A0; SHORT 0xE014; POP

PUSH; ORG $4EB54; jumpToHack(shopLoad); POP
ALIGN 4
shopLoad:
#incbin "asm/shopLoad.dmp"
POIN shopFloor
POIN shopShield
POIN shopMirrorShield
POIN shopConsumables
POIN shopBuy1
POIN shopBuy2
POIN shopBuy3
POIN shopBuy4

PUSH; ORG $77EE8; jumpToHack(shopGrab); POP
ALIGN 4
shopGrab:
#incbin "asm/shopGrab.dmp"

PUSH; ORG $64ECC; jumpToHack(shopBuy); POP
ALIGN 4
shopBuy:
#incbin "asm/shopBuy.dmp"
WORD walletShopItem
WORD walletShopSub
WORD boomerangShopItem
WORD boomerangShopSub
WORD quiverShopItem
WORD quiverShopSub
WORD bombBagShopItem
WORD bombBagShopSub

PUSH; ORG $64BB4; jumpToHack(shopAsk); POP
ALIGN 4
shopAsk:
#incbin "asm/shopAsk.dmp"
WORD walletShopItem
WORD walletShopSub
WORD boomerangShopItem
WORD boomerangShopSub
WORD quiverShopItem
WORD quiverShopSub
WORD bombBagShopItem
WORD bombBagShopSub
POIN getTextOffset
POIN shootbutterflyCredits
POIN digbutterflyCredits
POIN swimbutterflyCredits
POIN fastspinCredits
POIN fastsplitCredits
POIN longspinCredits
POIN greenclockCredits
POIN blueclockCredits
POIN redclockCredits
POIN figurineCredits
POIN trapGetIcon
POIN extraText
POIN kinstoneText
POIN progressiveTraps

//repoint this text id (0x2C05) so it points to ram
PUSH
ORG $9DAF1C+20; WORD 0x203F200-$89DAF1C
ORG $A236AC+20; WORD 0x203F200-$8A236AC
ORG $A689EC+20; WORD 0x203F200-$8A689EC
ORG $AAAB9C+20; WORD 0x203F200-$8AAAB9C
ORG $AED2FC+20; WORD 0x203F200-$8AED2FC
POP

//Goron Merchant can sell any items
PUSH; ORG $5D1B8; jumpToHack(goronMerchantItems); POP
ALIGN 4
goronMerchantItems:
#incbin "asm/goronMerchantItems.dmp"
WORD goronMerchantCustomSets
POIN goronMerchantData
#ifdef disableKinstoneDrops
	WORD 1
#else
	WORD 0
#endif

//Goron Merchant uses Link's position instead of subtype to determine price
PUSH; ORG $69134; jumpToHack(goronMerchantPrice); POP
ALIGN 4
goronMerchantPrice:
#incbin "asm/goronMerchantPrice.dmp"

PUSH
//Goron Merchant doesn't care about boss flags for restocking
ORG $5D112; SHORT 0x46C0
ORG $5D12E; SHORT 0x46C0
ORG $5D14A; SHORT 0x46C0
ORG $5D166; SHORT 0x46C0
//Allow buying item even if Kinstone bag is full
ORG $691A8; SHORT 0x46C0
//Receive bought item instead of Kinstone
ORG $691B2; SHORT 0x79A8 // ldrb r0,[r5,#6]
POP

#ifdef goronJPPrices
	PUSH
	ORG $1112F0
	SHORT 300 200 50
	SHORT 300 200 50
	SHORT 300 200 50
	SHORT 300 200 50
	SHORT 300 200 50
	POP
#endif

//set price for mirror shield
PUSH; ORG $FCEA8+(8*0x0E); SHORT 40; POP

//set price for bomb bag
PUSH; ORG $FCEA8+(8*0x65); SHORT 600; POP

//can only buy mirror shield if you do not have it currently
PUSH
ORG $64E06
SHORT 0x2D0E //cmp r0,#0xE (replace the shell check)
SHORT 0xD021 //beq #0x08064E4E (mirror shield check for buying a normal shield)
POP

ALIGN 4
shopFloor:
BYTE 0x06 0x0F 0x00 dogShopItem dogShopSub 0x04; SHORT 0 0x90 0x54 0 0x53 //floor item
shopTerminator

ALIGN 4
shopShield:
shopItem(0x0D,0x00,0x0D,0xC8,0x80) //small shield, spawns if you have had a shield, but no mirror shield
shopTerminator

ALIGN 4
shopMirrorShield:
shopItem(0x0E,0x00,0x0E,0xC8,0x80) //mirror shield, spawns if you have had a mirror shield
shopTerminator

ALIGN 4
shopConsumables:
shopItem(0x6C,0x00,0x6C,0x2D,0x40) //10 bombs, always spawns
shopItem(0x6D,0x00,0x6D,0x40,0x40) //30 bombs, always spawns
shopItem(0x6E,0x00,0x6E,0x52,0x40) //10 arrows, always spawns
shopItem(0x6F,0x00,0x6F,0x64,0x40) //30 arrows, always spawns
shopTerminator

ALIGN 4
shopBuy1:
shopItem(walletShopItem,walletShopSub,0x64,0x2D,0x80) //first randomized item
shopTerminator

ALIGN 4
shopBuy2:
shopItem(boomerangShopItem,boomerangShopSub,0x0B,0x40,0x80) //second randomized item
shopTerminator

ALIGN 4
shopBuy3:
shopItem(quiverShopItem,quiverShopSub,0x66,0x52,0x80) //third randomized item
shopTerminator

ALIGN 4
shopBuy4:
#ifdef enableBombBagShopItem
	shopItem(bombBagShopItem,bombBagShopSub,0x65,0x78,0x80) //fourth randomized item
#endif
shopTerminator

ALIGN 4
goronMerchantData:
//Only the first goronMerchantCustomSets rows are used, otherwise vanilla behavior
BYTE goron1LeftItem goron1LeftSub goron1MiddleItem goron1MiddleSub goron1RightItem goron1RightSub 0 0
BYTE goron2LeftItem goron2LeftSub goron2MiddleItem goron2MiddleSub goron2RightItem goron2RightSub 0 0
BYTE goron3LeftItem goron3LeftSub goron3MiddleItem goron3MiddleSub goron3RightItem goron3RightSub 0 0
BYTE goron4LeftItem goron4LeftSub goron4MiddleItem goron4MiddleSub goron4RightItem goron4RightSub 0 0
BYTE goron5LeftItem goron5LeftSub goron5MiddleItem goron5MiddleSub goron5RightItem goron5RightSub 0 0

ALIGN 4
kinstoneText:
POIN redWText
POIN redVText
POIN redEText
POIN blueLText
POIN blueSText
POIN greenCText
POIN greenGText
POIN greenPText

ALIGN 4
redWText:
POIN redWTextEnglish
POIN redWTextEnglish
POIN redWTextEnglish
POIN redWTextFrench
POIN redWTextGerman
POIN redWTextSpanish
POIN redWTextItalian

redWTextEnglish:
String("Kinstone Piece (Red W)"); BYTE 0
redWTextFrench:
String("Fragments du Bonheur (Rouge W)"); BYTE 0
redWTextGerman:
String("Gl"); BYTE 0xFC; String("cksfragment (Rotes W)"); BYTE 0
redWTextSpanish:
String("Piedra de la suerte (Red W)"); BYTE 0
redWTextItalian:
String("Frammenti di gioia (Red W)"); BYTE 0

ALIGN 4
redVText:
POIN redVTextEnglish
POIN redVTextEnglish
POIN redVTextEnglish
POIN redVTextFrench
POIN redVTextGerman
POIN redVTextSpanish
POIN redVTextItalian

redVTextEnglish:
String("Kinstone Piece (Red V)"); BYTE 0
redVTextFrench:
String("Fragments du Bonheur (Rouge V)"); BYTE 0
redVTextGerman:
String("Gl"); BYTE 0xFC; String("cksfragment (Rotes V)"); BYTE 0
redVTextSpanish:
String("Piedra de la suerte (Red V)"); BYTE 0
redVTextItalian:
String("Frammenti di gioia (Red V)"); BYTE 0

ALIGN 4
redEText:
POIN redETextEnglish
POIN redETextEnglish
POIN redETextEnglish
POIN redETextFrench
POIN redETextGerman
POIN redETextSpanish
POIN redETextItalian

redETextEnglish:
String("Kinstone Piece (Red E)"); BYTE 0
redETextFrench:
String("Fragments du Bonheur (Rouge E)"); BYTE 0
redETextGerman:
String("Gl"); BYTE 0xFC; String("cksfragment (Rotes E)"); BYTE 0
redETextSpanish:
String("Piedra de la suerte (Red E)"); BYTE 0
redETextItalian:
String("Frammenti di gioia (Red E)"); BYTE 0

ALIGN 4
blueLText:
POIN blueLTextEnglish
POIN blueLTextEnglish
POIN blueLTextEnglish
POIN blueLTextFrench
POIN blueLTextGerman
POIN blueLTextSpanish
POIN blueLTextItalian

blueLTextEnglish:
String("Kinstone Piece (Blue L)"); BYTE 0
blueLTextFrench:
String("Fragments du Bonheur (Bleu L)"); BYTE 0
blueLTextGerman:
String("Gl"); BYTE 0xFC; String("cksfragment (Blaues L)"); BYTE 0
blueLTextSpanish:
String("Piedra de la suerte (Blue L)"); BYTE 0
blueLTextItalian:
String("Frammenti di gioia (Blue L)"); BYTE 0

ALIGN 4
blueSText:
POIN blueSTextEnglish
POIN blueSTextEnglish
POIN blueSTextEnglish
POIN blueSTextFrench
POIN blueSTextGerman
POIN blueSTextSpanish
POIN blueSTextItalian

blueSTextEnglish:
String("Kinstone Piece (Blue S)"); BYTE 0
blueSTextFrench:
String("Fragments du Bonheur (Bleu S)"); BYTE 0
blueSTextGerman:
String("Gl"); BYTE 0xFC; String("cksfragment (Blaues S)"); BYTE 0
blueSTextSpanish:
String("Piedra de la suerte (Blue S)"); BYTE 0
blueSTextItalian:
String("Frammenti di gioia (Blue S)"); BYTE 0

ALIGN 4
greenCText:
POIN greenCTextEnglish
POIN greenCTextEnglish
POIN greenCTextEnglish
POIN greenCTextFrench
POIN greenCTextGerman
POIN greenCTextSpanish
POIN greenCTextItalian

greenCTextEnglish:
String("Kinstone Piece (Green C)"); BYTE 0
greenCTextFrench:
String("Fragments du Bonheur (Vert C)"); BYTE 0
greenCTextGerman:
String("Gl"); BYTE 0xFC; String("cksfragment (Gr"); BYTE 0xFC; String("nes C)"); BYTE 0
greenCTextSpanish:
String("Piedra de la suerte (Green C)"); BYTE 0
greenCTextItalian:
String("Frammenti di gioia (Green C)"); BYTE 0

ALIGN 4
greenGText:
POIN greenGTextEnglish
POIN greenGTextEnglish
POIN greenGTextEnglish
POIN greenGTextFrench
POIN greenGTextGerman
POIN greenGTextSpanish
POIN greenGTextItalian

greenGTextEnglish:
String("Kinstone Piece (Green G)"); BYTE 0
greenGTextFrench:
String("Fragments du Bonheur (Vert G)"); BYTE 0
greenGTextGerman:
String("Gl"); BYTE 0xFC; String("cksfragment (Gr"); BYTE 0xFC; String("nes G)"); BYTE 0
greenGTextSpanish:
String("Piedra de la suerte (Green G)"); BYTE 0
greenGTextItalian:
String("Frammenti di gioia (Green G)"); BYTE 0

ALIGN 4
greenPText:
POIN greenPTextEnglish
POIN greenPTextEnglish
POIN greenPTextEnglish
POIN greenPTextFrench
POIN greenPTextGerman
POIN greenPTextSpanish
POIN greenPTextItalian

greenPTextEnglish:
String("Kinstone Piece (Green P)"); BYTE 0
greenPTextFrench:
String("Fragments du Bonheur (Vert P)"); BYTE 0
greenPTextGerman:
String("Gl"); BYTE 0xFC; String("cksfragment (Gr"); BYTE 0xFC; String("nes P)"); BYTE 0
greenPTextSpanish:
String("Piedra de la suerte (Green P)"); BYTE 0
greenPTextItalian:
String("Frammenti di gioia (Green P)"); BYTE 0
